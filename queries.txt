Tested in manage.py shell

from core import *
from django.db.models import Q
from datetime import datetime


Queryset requests:
Saving:
1) Сохраните несколько объектов модели "Экстренных служб", "Заявителя" и "Обращения" двумя способами (методом create уровня менеджера запросов objects и методом save уровня экземпляра модели)

models.EmergencyServiceModel.objects.create(name='Новая экстренная служба',service_code='113',phone_number='2334')
models.ApplicantModel.objects.create(surname='Андреев', first_name='Павел', patronymic_name='Валерьевич', birth_date='1989-02-11', gender='М')
models.AppealModel.objects.create(number=91, applicant_id=2, description='Тест')

m = models.EmergencyServiceModel()
m.name = 'Новая 2-я экстренная служба'
m.service_code = '129'
m.phone_number = '888'
m.save()

models.ApplicantModel(surname='Красина', first_name='Елена', patronymic_name='Анатольевна', birth_date='1992-07-12', gender='Ж').save()

m = models.AppealModel()
m.number = 110
m.applicant_id = 8
m.description = 'Новое обращение'
m.save()


2) Создайте "Обращение" через менеджер запросов от объекта "Заявитель"
a = models.AppealModel(number=794, card_number=534, description='Создаем через заявителя')
models.ApplicantModel.objects.get(id=1).appeals.add(a, bulk=False)


3) Добавьте "Обращению" несколько "экстренных служб" двумя способами (add, set)

models.AppealModel.objects.get(id=7).services.add(1,3,4)

s = models.EmergencyServiceModel.objects.filter(id__range=(2,6))
models.AppealModel.objects.get(id=6).services.set(s)

=====================================================================================================

Queries:
1)  Получить объект заявителя с идентификатором в базе данных = 1 тремя способами.
models.ApplicantModel.objects.get(id=1)
models.ApplicantModel.objects.filter(id=1)
models.ApplicantModel.objects.filter(Q(id=1))

2) Получить все обращения заявителя двумя способами
models.AppealModel.objects.filter(applicant__id=target_id)
models.AppealModel.objects.filter(Q(applicant__id=target_id))
models.AppealModel.objects.exclude(Q(applicant__id__lt=target_id) | Q(applicant__id__gt=target_id))

3) Получить первые три экстренные службы
models.EmergencyServiceModel.objects.all()[:3]

4) Получить последние пять заявителей
models.ApplicantModel.objects.order_by('-id')[:5]

5) Получить самое старое и самое новое обращение двумя способами (latest, earliest, order_by)
models.AppealModel.objects.earliest('date')
models.AppealModel.objects.latest('date')
models.AppealModel.objects.order_by('date').first()
models.AppealModel.objects.order_by('-date').first()

6) Получить каждое второе обращение
models.AppealModel.objects.all()[::2]

7) Если дважды проитерироваться по полученному QuerySet'у, то сколько будет сделано обращений в БД? С помощью конструкции len(connection.queries) можно проверить количество запросов в БД. Для сброса следует использовать reset_queries() из django.db.

1. Подробности в файле queries_more.txt

8) Вывести общее число обращений
models.AppealModel.objects.count()

9) Получить случайное обращение
models.AppealModel.objects.order_by('?').first()

====================================================================================================================
Fitering:

1) Получить обращение с заявителем, идентификатор которого равен 1
models.AppealModel.objects.filter(applicant__id=1)

2)Получить всех заявителей определенного пола и без обращений
models.ApplicantModel.objects.filter(appeals=None).exclude(gender='Ж') # gender must be opposite of wanted in query
models.ApplicantModel.objects.filter(Q(appeals=None) & Q(gender=wanted)) # gender inversion not required

3) Отсортировать всех заявителей по идентификатору
models.ApplicantModel.objects.order_by('id')

4) Получить всех несовершеннолетних заявителей
from datetime import datetime
from dateutil.relativedelta import relativedelta # needs python-dateutil package
models.ApplicantModel.objects.filter(birth_date__gt=datetime.now() - relativedelta(years=18))

# Without python-dateutil:

now = datetime.now()
birth_date_border = datetime(now.year-18, now.month, now.day)
models.ApplicantModel.objects.filter(birth_date__gt=birth_date_border)


5) Получить всех совершеннолетних заявителей

from datetime import datetime
from dateutil.relativedelta import relativedelta # needs python-dateutil package
models.ApplicantModel.objects.exclude(birth_date__gt=datetime.now() - relativedelta(years=18))

# Without python-dateutil

now = datetime.now()
birth_date_border = datetime(now.year-18, now.month, now.day)
models.ApplicantModel.objects.exclude(birth_date__gt=birth_date_border) # OR: models.ApplicantModel.objects.filter(birth_date__lte=birth_date_border)

6) Узнать есть ли вообще какие нибудь заявители
models.ApplicantModel.objects.count() > 0

7) Узнать, есть ли какие нибудь заявители с похожими именами (пример: Алексей, Александра)
models.ApplicantModel.objects.filter(first_name__icontains=search_name)

8) Получить все обращения, кроме тех, у которых не назначены службы
models.AppealModel.objects.exclude(services=None)

9) Среди обращений со службой с кодом "03" вывести дату самого первого обращения
models.AppealModel.objects.filter(services__service_code='03').earliest('date')

10) Получить все обращения, которые созданы до определенной даты
models.AppealModel.objects.filter(date__lt=target_date) # where target_date is a defined date

11) Получить всех заявителей без изображения и/или без номера телефона
models.ApplicantModel.objects.filter(phone_number=None) | models.ApplicantModel.objects.filter(image='')
12) Получить всех заявителей, с определенным кодом оператора (917)
models.ApplicantModel.objects.filter(phone_number__startswith='8917')

13) Получить результат объединения, пересечения и разницы предыдущих двух запросов.
qs1 = models.ApplicantModel.objects.filter(phone_number=None) | models.ApplicantModel.objects.filter(image='')
qs2 = models.ApplicantModel.objects.filter(phone_number__startswith='8917')

qs1 = models.ApplicantModel.objects.filter(Q(phone_number=None) | Q(image=''))
qs2 = models.ApplicantModel.objects.filter(phone_number__startswith='8917')

union = (qs1 | qs2).distinct()
intersection = qs1 & qs2

# difference = ??? # .union, .intersect and .difference cause DatabaseError: ORDER BY not allowed in subqueries of compound statements. query.clear_ordering(), order_by() don't work too. 
# considering qs3 = "exclude everything in qs2 from qs1" as difference, it can be obtained by modifying the query:
qs3 = models.ApplicantModel.objects.filter((Q(phone_number=None) | Q(image='')) & ~Q(phone_number__startswith='8917'))

# another way of getting qs3 under this consideration:
qs4 = models.ApplicantModel.objects.exclude(phone_number__startswith='8917')
qs3 = qs1 & qs4

14) Вывести все обращения, созданные в определенный период
models.AppealModel.objects.filter(date__gt=dateBegin, date__lte=dateEnd)

15) Получить количество заявителей без номера телефона
models.ApplicantModel.objects.filter(phone_number=None).count()

16) Выведите все уникальные записи модели заявитель
models.ApplicantModel.objects.all().distinct()

17) Получить все обращения, в описании которых есть какое то ключевое слово в любом регистре
models.AppealModel.objects.filter(description__icontains=word)

18) Выбрать всех заявителей, при этом получить только значения поля "номер телефона"
models.ApplicantModel.objects.values('phone_number')

19) Выбрать всех заявителей, при этом получить все поля, кроме состояния здоровья
fields = [f.name for f in models.ApplicantModel._meta.get_fields()]
fields.remove('health_state')
models.ApplicantModel.objects.values(*fields)

20) Вывести все службы используя sql запрос
models.EmergencyServiceModel.objects.raw('SELECT * from core_emergencyservicemodel')

21) Выберите или создайте заявителя с номером "12341234"
models.ApplicantModel.objects.get_or_create(phone_number='12341234')

22) Измените номер заявителя с номером "12341234" на любой другой, если заявителя нет, то запрос должен его создать.
appl = models.ApplicantModel.objects.get_or_create(phone_number='12341234').first()
appl.phone_number = '23452345'
appl.save()

23) Создайте сразу несколько заявителей.
models.ApplicantModel.objects.bulk_create([
      models.ApplicantModel(first_name='Рустам', surname='Нуриев', patronymic_name='Рашитович'),
      models.ApplicantModel(first_name='Тамара', surname='Романова', patronymic_name='Григорьевна', gender='Ж', birth_date='1977-02-12'),
      models.ApplicantModel(first_name='Глеб', surname='Николаев', patronymic_name='Дмитриевич', gender='М', birth_date='1994-06-30'),
	  ])
	  
24) Измените несколько заявителей. Для поля "состояние здоровья" задайте значение "Полностью здоров"
models.ApplicantModel.objects.filter(id__range=(7,12)).update(health_state='Полностью здоров(а)')

25) Выведите имя заявителя у какого-либо обращения. Убедитесь, что было сделано не более одного запроса.
# makes 2 queries, should 1? Returned name is correct

django.db.reset_queries()
len(django.db.connection.queries)
models.AppealModel.objects.get(id=3).applicant.full_name
len(django.db.connection.queries)

26) Выведите список всех обращений с указанием списка задействованных экстренных служб в следующем формате: "номер обращения: , список кодов служб:. Убедитесь, что было сделано не более двух запросов в БД. 
django.db.reset_queries()
appeals = models.AppealModel.objects.all()
for i in appeals:
	print(i.number, [s.service_code for s in i.services.all()])
print("Len: ",len(django.db.connection.queries))

	
27) Выведите все значения дат создания происшествий. Поместите даты в список.
models.AccidentModel.objects.values_list('addition_datetime')

28) Создайте queryset, который будет всегда пустым.
models.AppealModel.objects.none()

29) Вывести среднее количество пострадавших в происшествиях
from django.db.models import Avg
models.AccidentModel.objects.aggregate(Avg('injured_count'))

30)  Вывести общее количество пострадавших в происшествиях
from django.db.models import Sum
models.AccidentModel.objects.aggregate(Sum('injured_count'))

31) Вывести количество вызванных экстренных служб для каждого происшествия
qs = models.AccidentModel.objects.annotate(Count('services'))
for i in qs: # qs.values('services__count')
	print(i.number, i.injured_count, i.services__count)
	
# or
models.AccidentModel.objects.annotate(Count('services')).values()
	
32) Вывести среднее количество вызванных экстренных служб
models.AccidentModel.objects.annotate(Count('services')).aggregate(Avg('services__count'))

33) Вывести наибольшее и наименьшее количество пострадавших
from django.db.models import Min, Max
models.AccidentModel.objects.aggregate(Min('injured_count'),Max('injured_count'))

34)  Сформировать запрос к модели заявитель, в котором будет добавлено поле с количеством обращений каждого заявителя.
models.ApplicantModel.objects.all().annotate(Count('appeals'))
	
=======================================================================================================================
DOP:

1) Всем обращениям, у которых назначены службы, присвоить статус "Завершено"
models.AppealModel.objects.exclude(services=None).update(status='Завершено')
2) Удалить всех заявителей без номера телефона
models.ApplicantModel.objects.filter(phone_number=None).delete()