Tested in manage.py shell

Queryset requests:
Saving:
1)

models.EmergencyServiceModel.objects.create(name='Новая экстренная служба',service_code='113',phone_number='2334')
models.ApplicantModel.objects.create(surname='Андреев', first_name='Павел', patronymic_name='Валерьевич', birth_date='1989-02-11', gender='М')
models.AppealModel.objects.create(number=91, applicant_id=2, description='Тест')

m = models.EmergencyServiceModel()
m.name = 'Новая 2-я экстренная служба'
m.service_code = '129'
m.phone_number = '888'
m.save()

models.ApplicantModel(surname='Красина', first_name='Елена', patronymic_name='Анатольевна', birth_date='1992-07-12', gender='Ж').save()

m = models.AppealModel()
m.number = 110
m.applicant_id = 8
m.description = 'Новое обращение'
m.save()

2) ???
3) 

models.AppealModel.objects.get(id=7).services.add(1,3,4)

s = models.EmergencyServiceModel.objects.filter(id__range=(2,6))
models.AppealModel.objects.get(id=6).services.set(s)

Queries:
1) 
models.ApplicantModel.objects.get(id=1)
models.ApplicantModel.objects.filter(id=1)

2)
models.AppealModel.objects.filter(applicant__id=target_id)
models. ???

3) models.EmergencyServiceModel.objects.all()[:3]
4) models.ApplicantModel.objects.order_by('-id')[:5]
5) 
models.AppealModel.objects.earliest('date')
models.AppealModel.objects.latest('date')
models.AppealModel.objects.order_by('date')[0]
models.AppealModel.objects.order_by('-date')[0]

6) models.AppealModel.objects.all()[::2]
7) 1. Подробности в файле queries_more.txt
8) models.AppealModel.objects.count()
9) models.AppealModel.objects.order_by('?').first()

=============================
Fitering:
from core import *

1) models.AppealModel.objects.filter(applicant__id=1)
2) models.ApplicantModel.objects.filter(appeals=None).exclude(gender='Ж')
3) models.ApplicantModel.objects.order_by('id')

4)
from datetime import datetime
from dateutil.relativedelta import relativedelta # needs python-dateutil package
models.ApplicantModel.objects.filter(birth_date__gt=datetime.now() - relativedelta(years=18))

# Without python-dateutil:

now = datetime.now()
birth_date_border = datetime(now.year-18, now.month, now.day)
models.ApplicantModel.objects.filter(birth_date__gt=birth_date_border)


5)

from datetime import datetime
from dateutil.relativedelta import relativedelta # needs python-dateutil package
models.ApplicantModel.objects.exclude(birth_date__gt=datetime.now() - relativedelta(years=18))

# Without python-dateutil

now = datetime.now()
birth_date_border = datetime(now.year-18, now.month, now.day)
models.ApplicantModel.objects.exclude(birth_date__gt=birth_date_border) # OR: models.ApplicantModel.objects.filter(birth_date__lte=birth_date_border)

6) models.ApplicantModel.objects.count() > 0

7) models.ApplicantModel.objects.filter(first_name__icontains=search_name)

8) models.AppealModel.objects.filter(services=None)

9) models.AppealModel.objects.filter(services__service_code__contains='03')

10) models.AppealModel.objects.filter(date__lt=target_date) # where target_date is a defined date

11) models.ApplicantModel.objects.filter(phone_number=None) | models.ApplicantModel.objects.filter(image='') # image=None doesn't work

12) models.ApplicantModel.objects.filter(phone_number__startswith='8917')

13)
qs1 = models.ApplicantModel.objects.filter(phone_number=None) | models.ApplicantModel.objects.filter(image='')
qs2 = models.ApplicantModel.objects.filter(phone_number__startswith='8917')

union = qs1 | qs2
intersection = qs1 & qs2
difference = ???

14) models.AppealModel.objects.filter(date__gt=dateBegin, date__lte=dateEnd)
15) models.ApplicantModel.objects.filter(phone_number=None).count()
16) models.ApplicantModel.objects.all().distinct() # ?
17) models.AppealModel.objects.filter(description__icontains=word)
18) models.ApplicantModel.objects.values('phone_number')
19)
fields = [f.name for f in models.ApplicantModel._meta.get_fields()]
fields.remove('health_state')
models.ApplicantModel.objects.values(*fields)

20) models.EmergencyServiceModel.objects.raw('SELECT * from core_emergencyservicemodel')
21) models.ApplicantModel.objects.get_or_create(phone_number='12341234')
22)
appl = models.ApplicantModel.objects.get_or_create(phone_number='12341234')[0]
appl.phone_number = '23452345'
appl.save()

23)
models.ApplicantModel.objects.bulk_create([
      models.ApplicantModel(first_name='Рустам', surname='Нуриев', patronymic_name='Рашитович'),
      models.ApplicantModel(first_name='Тамара', surname='Романова', patronymic_name='Григорьевна', gender='Ж', birth_date='1977-02-12'),
      models.ApplicantModel(first_name='Глеб', surname='Николаев', patronymic_name='Дмитриевич', gender='М', birth_date='1994-06-30'),
	  ])
	  
24) models.ApplicantModel.objects.filter(id__range=(7,12)).update(health_state='Полностью здоров(а)')
25) # makes 2 queries, should 1? Returned name is correct

django.db.reset_queries()
len(django.db.connection.queries)
models.AppealModel.objects.get(id=3).applicant.full_name
len(django.db.connection.queries)

26) 
appeals = models.AppealModel.objects.all()
for i in appeals:
	print(i.number, [s.service_code for s in i.services.all()])
	
27) models.AccidentModel.objects.values_list('addition_datetime')

28) models.AppealModel.objects.none()
29) 
from django.db.models import Avg
models.AccidentModel.objects.aggregate(Avg('injured_count'))

30)  
from django.db.models import Sum
models.AccidentModel.objects.aggregate(Sum('injured_count'))

31) ...
qs = models.AccidentModel.objects.annotate(Count('services'))
for i in qs: # qs.values('services__count')
	print(i.number, i.injured_count, i.services__count)
	
32) models.AccidentModel.objects.annotate(Count('services')).aggregate(Avg('services__count'))

33)
from django.db.models import Min, Max
models.AccidentModel.objects.aggregate(Min('injured_count'),Max('injured_count'))

34) 
qs = models.ApplicantModel.objects.all().annotate(Count('appeals'))
for i in qs: 
	print(i.appeals__count)
	
================================
DOP:
1) models.AppealModel.objects.exclude(services=None).update(status='Завершено')
2) models.ApplicantModel.objects.filter(phone_number=None).delete()